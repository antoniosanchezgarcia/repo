{
	"name": "movies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "moviesdb",
						"type": "DatasetReference"
					},
					"name": "moviesOut1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlDWTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Select1"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "genre"
				},
				{
					"name": "Window1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesOut1\nmoviesOut1 select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\t{Rotten Tomato} = {Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(toInteger(year)>1950) ~> Filter1\nFilter1 derive(genre = iif(locate('|',genres)>0, left(genres, locate('|',genres) -1),genres)) ~> genre\ngenre window(over(genre,\n\t\tyear),\n\tdesc({Rotten Tomato}, true),\n\t{RatingsRank } = rank()) ~> Window1\nWindow1 aggregate(groupBy(genre,\n\t\tyear),\n\tavgRanking = avg(toInteger({Rotten Tomato}))) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'table',\n\tstaged: true,\n\tkeys:['genre','year']) ~> sink1"
		}
	}
}